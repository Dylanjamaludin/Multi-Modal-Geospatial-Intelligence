import sysimport osimport shutilfrom component_file import *from PyQt6.QtWidgets import (    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget,    QPushButton, QLabel, QLineEdit, QDockWidget, QTabWidget, QListWidget,    QPlainTextEdit, QFileDialog, QMessageBox, QGridLayout, QToolBar, QListWidgetItem, QScrollArea, QSizePolicy)from PyQt6.QtCore import Qt, QSize, QEvent, QTimerfrom PyQt6.QtGui import QPixmap, QIcon, QAction, QFontDatabase, QFontMetricsimport platform, ctypesfrom file_explorer_dock import *from image_preview_dock import *class MainWindow(QMainWindow):    def __init__(self):        super().__init__()        self.setWindowTitle("GEOINT")        self.setDockOptions(QMainWindow.DockOption.AllowTabbedDocks | QMainWindow.DockOption.AllowNestedDocks)        self.setStyleSheet('''                QMainWindow                {                    background-color: #494949;                }                QMainWindow::separator                 {                    width:1px;                    background-color: #494949;                }                ''')        self.setup_ui()        #self.load_chat_history()        self.setup_menus()        self.showMaximized()        def setup_ui(self):        layout = QVBoxLayout()        self.titlebar = TitleBar("Chat Box")        self.titlebar.setFixedHeight(38)        layout.setAlignment(Qt.AlignmentFlag.AlignTop)        layout.setContentsMargins(0, 0, 0, 0)        layout.setSpacing(0)        layout.addWidget(self.titlebar)        chatbox_frame = QFrame()        self.chatbox_layout = QVBoxLayout(chatbox_frame)        chatbox_frame.setLayout(self.chatbox_layout)        chatbox_frame.setSizePolicy(            QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Expanding)        self.chatbox_layout.setContentsMargins(0, 14, 0, 0)        self.chatbox_layout.setSpacing(0)        chatbox_frame.setStyleSheet('''                QFrame {                    background: #202020;                    border: 2px solid #494949;                    border-radius:10px;                }                    ''')        layout.addWidget(chatbox_frame)        self.tabs = TabWidget(parent=None)        self.chatbox_layout.addWidget(self.tabs)        #layout.addWidget(chatbox_frame)        widget = QWidget()        widget.setLayout(layout)        self.setCentralWidget(widget)        # Interactive Map Dock Widget        map_placeholder = QLabel("Interactive Map Placeholder")        map_placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)        #map_placeholder.setStyleSheet("border: none; background-color: #202020;")        self.map_dock_widget = docks("Interactive Map", map_placeholder, self)        self.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.map_dock_widget)        # Image Preview Dock Widget        # self.image_preview_label = QLabel("Image Preview/Selection")        # self.image_preview_label.setAlignment(Qt.AlignmentFlag.AlignCenter)        # self.image_preview_label.setScaledContents(True)        # self.image_preview_label.setMaximumSize(315, 317)        # self.image_preview_label.setStyleSheet("background-color: #202020;")        self.image_preview_label = image_preview_widget("Image Preview/Selection")        self.image_preview_dock_widget = docks("Image Preview", self.image_preview_label, self)        #self.splitDockWidget(self.map_dock_widget, self.image_preview_dock_widget, Qt.Orientation.Vertical)        self.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.map_dock_widget)        self.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.image_preview_dock_widget)        # File Explorer Dock Widget        #self.file_explorer_dock_widget = self.createFileExplorerWidget()        self.file_explorer_widget = file_explorer(self.image_preview_label)        self.file_explorer_dock_widget = docks("Map File Explorer", self.file_explorer_widget, self)        self.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, self.file_explorer_dock_widget)        # self.setDockNestingEnabled(True)        # self.resizeDocks([self.map_dock_widget, self.image_preview_dock_widget], [1, 1], Qt.Orientation.Vertical)    def setup_menus(self):        menubar = self.menuBar()                    viewMenu = menubar.addMenu("&View")                    self.add_view_menu_action(viewMenu, "Interactive Map", self.map_dock_widget)        self.add_view_menu_action(viewMenu, "Image Preview", self.image_preview_dock_widget)        self.add_view_menu_action(viewMenu, "Map File Explorer", self.file_explorer_dock_widget)    def add_view_menu_action(self, menu, title, dock_widget):        action = QAction(title, self, checkable=True)        action.setChecked(dock_widget.isVisible())                action.triggered.connect(lambda checked: dock_widget.setVisible(checked))        dock_widget.visibilityChanged.connect(action.setChecked)        menu.addAction(action)    #Please integrate this into a widget using INHERITANCE    # def createFileExplorerWidget(self):    #     self.file_list = QListWidget()    #     self.file_path_line_edit = LineEdit()    #     self.file_list.setSelectionMode(QListWidget.SelectionMode.NoSelection)    #    #     file_explorer_layout = QHBoxLayout()    #     file_explorer_layout.setContentsMargins(0,0,0,0)    #     file_explorer_layout.setSpacing(5)    #     self.file_list.setStyleSheet('''    #     QListWidget    #     {    #         border-top: 2px solid #494949;    #         border-bottom: 2px solid #494949;    #         border-right: 0;    #         border-left: 0;    #         border-radius:0;    #     }    #     ''')    #    #     open_folder_button = icon_button(initial_icon='feather/folder.svg',icon_square_len=22, button_square_len=34)    #     open_folder_button.clicked.connect(self.open_file_dialog)    #    #     add_file_button = icon_button(initial_icon='feather/plus.svg',icon_square_len=22, button_square_len=34)    #     add_file_button.clicked.connect(self.add_file_to_list)    #    #     file_explorer_layout.addWidget(open_folder_button)    #     file_explorer_layout.addWidget(self.file_path_line_edit)    #     file_explorer_layout.addWidget(add_file_button)    #    #     file_explorer_vertical_layout = QVBoxLayout()    #     file_explorer_vertical_layout.addLayout(file_explorer_layout)    #     file_explorer_vertical_layout.addWidget(self.file_list)    #    #     file_explorer_widget = QWidget()    #     file_explorer_widget.setLayout(file_explorer_vertical_layout)    #    #     return docks("Map File Explorer", file_explorer_widget, self)    #    #    # def open_file_dialog(self):    #     file_path, _ = QFileDialog.getOpenFileName(self, "Select PNG file", "", "PNG files (*.png)")    #     if file_path:    #         self.file_path_line_edit.setText(file_path)    #    #    # def add_file_to_list(self):    #     file_path = self.file_path_line_edit.text()    #     try:    #         if file_path and os.path.isfile(file_path):    #             base_name = os.path.basename(file_path)    #             new_file_path = os.path.join(self.uploads_folder, base_name)    #    #             file_root, file_extension = os.path.splitext(base_name)    #             counter = 1    #             while os.path.exists(new_file_path):    #                 new_file_name = f"{file_root}_{counter}{file_extension}"    #                 new_file_path = os.path.join(self.uploads_folder, new_file_name)    #                 counter += 1    #    #             shutil.copy(file_path, new_file_path)    #    #             custom_list_item_widget = CustomListItem(new_file_path, self.image_preview_label, self.file_list)    #             list_widget_item = QListWidgetItem(self.file_list)    #             list_widget_item.setSizeHint(custom_list_item_widget.sizeHint())    #    #             self.file_list.addItem(list_widget_item)    #             self.file_list.setItemWidget(list_widget_item, custom_list_item_widget)    #    #             custom_list_item_widget.list_widget_item = list_widget_item    #    #             self.file_path_line_edit.clear()    #         else:    #             QMessageBox.information(self, "Error", "Invalid file path.")    #     except Exception as e:    #         print(f"An error occurred: {e}")    #         QMessageBox.critical(self, "Error", f"An unexpected error occurred: {e}")# def main():app = QApplication(sys.argv)app.setHighDpiScaleFactorRoundingPolicy(Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)if platform.system() == "Windows":    if int(platform.release()) >= 8:        print(platform.release())        ctypes.windll.shcore.SetProcessDpiAwareness(True)window = MainWindow()window.show()sys.exit(app.exec())# if __name__ == "__main__":#     main()